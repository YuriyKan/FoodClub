//
//  StyleKitName.swift
//  ProjectName
//
//  Created by Yuriy Kan on 3/17/15.
//  Copyright (c) 2015 Style Mobile. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit
import CoreImage
public class ImageMaker {

    //// Drawing Methods

    enum RectType {
        case Square, Horisontal, Vertical
    }
    
    
    public class func blurImage(sourceImage: UIImage, blurValue: CGFloat = 5) -> UIImage {
        var imageToBlur = CIImage(image: sourceImage)
//        var someFilter = CIFilter(name: "kCICategoryDistortionEffect")
        var blurfilter = CIFilter(name: "CIGaussianBlur")
        blurfilter.setValue(imageToBlur, forKey: "inputImage")
        blurfilter.setValue(blurValue, forKey: "inputRadius")
        let mask = CGRect(x: 1, y: 1, width: sourceImage.size.width - 2, height: sourceImage.size.height - 2)
//        blurfilter.setValue(mask, forKey: "kCIInputMaskImageKey")
        
        let attr = blurfilter.inputKeys() as Array
        println("attr \(attr)")
        
        var resultImage = blurfilter.valueForKey("outputImage") as CIImage
        var blurredImage = UIImage(CIImage: resultImage)
        return blurredImage!
    }
    
    class func rectType(#size: CGSize) -> RectType {
        if size.width == size.height {return .Square}
        else if size.width > size.height {return .Horisontal}
        else {return .Vertical}
    }
    
    public class func drawRoundImage(#frame: CGRect, logo: UIImage, cornerRadius: CGFloat, lineWidth: CGFloat, lineColor: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations

        //// image Drawing
//        let imageRect = CGRectMake(frame.minX + floor(frame.width * 0.05000 + 0.5), frame.minY + floor(frame.height * 0.05000 + 0.5), floor(frame.width * 0.95000 + 0.5) - floor(frame.width * 0.05000 + 0.5), floor(frame.height * 0.95000 + 0.5) - floor(frame.height * 0.05000 + 0.5))
        let imageRect = CGRectMake(lineWidth / 2 + 1, lineWidth / 2 + 1, frame.width - lineWidth - 2, frame.height - lineWidth - 2)
        let imagePath = UIBezierPath(roundedRect: imageRect, cornerRadius: cornerRadius)
        CGContextSaveGState(context)
        imagePath.addClip()
        
        var offsetX: CGFloat = 0
        var offsetY: CGFloat = 0
        var width: CGFloat = 0
        var height: CGFloat = 0
        
        println("imageWidth \(logo.size.width)   imageHeight \(logo.size.height)   frameWidth \(frame.width)   frameHeight \(frame.height)")
        
        
        switch rectType(size : frame.size) {
        case .Square:
            switch rectType(size: logo.size) {
            case .Square:
                offsetX = 0
                offsetY = 0
                width = frame.width
                height = frame.height
            case .Vertical:
                offsetX = 0
                width = frame.width
                let scale = logo.size.height / logo.size.width
                height = frame.width * scale
                offsetY = -((height - frame.height) / 2)
            case .Horisontal:
                offsetY = 0
                height = frame.height
                let scale = logo.size.width / logo.size.height
                width = frame.height * scale
                offsetX = -((width - frame.width) / 2)
            }
        case .Vertical:
            switch rectType(size: logo.size) {
            case .Square:
                offsetY = 0
                height = frame.height
                let scale = logo.size.width / logo.size.height
                width = frame.height * scale
                offsetX = -((width - frame.width) / 2)
                
                
            case .Vertical:
                offsetX = 0
                width = frame.width
                let scale = logo.size.height / logo.size.width
                height = frame.width * scale
                offsetY = -((height - frame.height) / 2)
            case .Horisontal:
                offsetY = 0
                height = frame.height
                let scale = logo.size.width / logo.size.height
                width = frame.height * scale
                offsetX = -((width - frame.width) / 2)
            }
            println("e \(0)")
        case .Horisontal:
            switch rectType(size: logo.size) {
            case .Square:
                offsetX = 0
                width = frame.width
                let scale = logo.size.height / logo.size.width
                height = frame.width * scale
                offsetY = -((height - frame.height) / 2)
            case .Vertical:
                offsetX = 0
                width = frame.width
                let scale = logo.size.height / logo.size.width
                height = frame.width * scale
                offsetY = -((height - frame.height) / 2)
            case .Horisontal:
                offsetY = 0
                height = frame.height
                let scale = logo.size.width / logo.size.height
                width = frame.height * scale
                offsetX = -((width - frame.width) / 2)
            }
        }
        
        
        logo.drawInRect(CGRectMake(offsetX, offsetY, width, height))
        CGContextRestoreGState(context)
        lineColor.setStroke()
        floor(3.5)
        imagePath.lineWidth = lineWidth
        imagePath.stroke()
    }

    //// Generated Images
    public class func roundImageOfImage(#frame: CGRect, logo: UIImage, lineWidth: CGFloat = 2) -> UIImage {
        return imageOfRoundImage(frame: frame, logo: logo, cornerRadius: frame.width > frame.height ? frame.height / 2 : frame.width / 2, lineWidth: lineWidth, lineColor: UIColor.whiteColor())
    }
    public class func imageOfRoundImage(#frame: CGRect, logo: UIImage, cornerRadius: CGFloat, lineWidth: CGFloat, lineColor: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            ImageMaker.drawRoundImage(frame: frame, logo: logo, cornerRadius: cornerRadius, lineWidth: lineWidth, lineColor: lineColor)

        let imageOfRoundImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRoundImage
    }

}

