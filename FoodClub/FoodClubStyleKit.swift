//
//  FoodClubStyleKit.swift
//  FoodClub
//
//  Created by Yuriy Kan on 3/12/15.
//  Copyright (c) 2015 Style Mobile. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class FoodClubStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var lightGreen: UIColor = UIColor(red: 0.545, green: 0.749, blue: 0.133, alpha: 0.718)
        static var white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var black: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var gray: UIColor = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)
        static var clear: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.689, alpha: 0.000)
        static var whiteTransparent: UIColor = FoodClubStyleKit.white.colorWithAlpha(0.3)
        static var green: UIColor = UIColor(red: 0.652, green: 0.800, blue: 0.320, alpha: 1.000)
        static var red: UIColor = UIColor(red: 0.953, green: 0.322, blue: 0.227, alpha: 1.000)
    }

    //// Colors

    public class var lightGreen: UIColor { return Cache.lightGreen }
    public class var white: UIColor { return Cache.white }
    public class var black: UIColor { return Cache.black }
    public class var gray: UIColor { return Cache.gray }
    public class var clear: UIColor { return Cache.clear }
    public class var whiteTransparent: UIColor { return Cache.whiteTransparent }
    public class var green: UIColor { return Cache.green }
    public class var red: UIColor { return Cache.red }

    //// Drawing Methods

    public class func drawLogoEmpty(#frame: CGRect) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.02500 + 0.5), frame.minY + floor(frame.height * 0.02500 + 0.5), floor(frame.width * 0.97500 + 0.5) - floor(frame.width * 0.02500 + 0.5), floor(frame.height * 0.97500 + 0.5) - floor(frame.height * 0.02500 + 0.5))


        //// Group
        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.64450 * group.width, group.minY + 0.64334 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.64450 * group.width, group.minY + 0.29351 * group.height), controlPoint1: CGPointMake(group.minX + 0.71850 * group.width, group.minY + 0.54673 * group.height), controlPoint2: CGPointMake(group.minX + 0.71850 * group.width, group.minY + 0.39011 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.35550 * group.width, group.minY + 0.29351 * group.height), controlPoint1: CGPointMake(group.minX + 0.57051 * group.width, group.minY + 0.19690 * group.height), controlPoint2: CGPointMake(group.minX + 0.42949 * group.width, group.minY + 0.19690 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.35550 * group.width, group.minY + 0.64334 * group.height), controlPoint1: CGPointMake(group.minX + 0.28150 * group.width, group.minY + 0.39011 * group.height), controlPoint2: CGPointMake(group.minX + 0.28150 * group.width, group.minY + 0.54673 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.64450 * group.width, group.minY + 0.64334 * group.height), controlPoint1: CGPointMake(group.minX + 0.42949 * group.width, group.minY + 0.73994 * group.height), controlPoint2: CGPointMake(group.minX + 0.57051 * group.width, group.minY + 0.73994 * group.height))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.03158 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.23776 * group.width, group.minY + 0.11181 * group.height), controlPoint1: CGPointMake(group.minX + 0.40284 * group.width, group.minY + 0.03158 * group.height), controlPoint2: CGPointMake(group.minX + 0.31259 * group.width, group.minY + 0.06116 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.03158 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.11335 * group.width, group.minY + 0.19601 * group.height), controlPoint2: CGPointMake(group.minX + 0.03158 * group.width, group.minY + 0.33846 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.14686 * group.width, group.minY + 0.80776 * group.height), controlPoint1: CGPointMake(group.minX + 0.03158 * group.width, group.minY + 0.61780 * group.height), controlPoint2: CGPointMake(group.minX + 0.07507 * group.width, group.minY + 0.72545 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.21407 * group.width, group.minY + 0.65554 * group.height), controlPoint1: CGPointMake(group.minX + 0.16556 * group.width, group.minY + 0.76599 * group.height), controlPoint2: CGPointMake(group.minX + 0.16316 * group.width, group.minY + 0.70526 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.29615 * group.width, group.minY + 0.59018 * group.height), controlPoint1: CGPointMake(group.minX + 0.25261 * group.width, group.minY + 0.61791 * group.height), controlPoint2: CGPointMake(group.minX + 0.26679 * group.width, group.minY + 0.60766 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.33689 * group.width, group.minY + 0.66195 * group.height), controlPoint1: CGPointMake(group.minX + 0.30629 * group.width, group.minY + 0.61608 * group.height), controlPoint2: CGPointMake(group.minX + 0.31987 * group.width, group.minY + 0.64037 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.66311 * group.width, group.minY + 0.66195 * group.height), controlPoint1: CGPointMake(group.minX + 0.42116 * group.width, group.minY + 0.76883 * group.height), controlPoint2: CGPointMake(group.minX + 0.57884 * group.width, group.minY + 0.76883 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.70385 * group.width, group.minY + 0.59018 * group.height), controlPoint1: CGPointMake(group.minX + 0.68013 * group.width, group.minY + 0.64037 * group.height), controlPoint2: CGPointMake(group.minX + 0.69371 * group.width, group.minY + 0.61608 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.73592 * group.width, group.minY + 0.61152 * group.height), controlPoint1: CGPointMake(group.minX + 0.71479 * group.width, group.minY + 0.59669 * group.height), controlPoint2: CGPointMake(group.minX + 0.72550 * group.width, group.minY + 0.60381 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.78593 * group.width, group.minY + 0.65554 * group.height), controlPoint1: CGPointMake(group.minX + 0.75346 * group.width, group.minY + 0.62450 * group.height), controlPoint2: CGPointMake(group.minX + 0.76175 * group.width, group.minY + 0.62944 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.85314 * group.width, group.minY + 0.80776 * group.height), controlPoint1: CGPointMake(group.minX + 0.83684 * group.width, group.minY + 0.71053 * group.height), controlPoint2: CGPointMake(group.minX + 0.83444 * group.width, group.minY + 0.76599 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.96842 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.92493 * group.width, group.minY + 0.72545 * group.height), controlPoint2: CGPointMake(group.minX + 0.96842 * group.width, group.minY + 0.61780 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.03158 * group.height), controlPoint1: CGPointMake(group.minX + 0.96842 * group.width, group.minY + 0.24130 * group.height), controlPoint2: CGPointMake(group.minX + 0.75870 * group.width, group.minY + 0.03158 * group.height))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.77614 * group.height), controlPoint2: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.22386 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + -0.00000 * group.width, group.minY + 0.77614 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.20939 * group.width, group.minY + 0.09308 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.33224 * group.height), controlPoint2: CGPointMake(group.minX + 0.08262 * group.width, group.minY + 0.18378 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.35151 * group.width, group.minY + 0.02242 * group.height), controlPoint1: CGPointMake(group.minX + 0.25222 * group.width, group.minY + 0.06244 * group.height), controlPoint2: CGPointMake(group.minX + 0.30008 * group.width, group.minY + 0.03839 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.39842 * group.width, group.minY + 0.00785 * group.height), controlPoint2: CGPointMake(group.minX + 0.44829 * group.width, group.minY + -0.00000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.22386 * group.height))
        bezier2Path.closePath()
        FoodClubStyleKit.white.setFill()
        bezier2Path.fill()
    }

    public class func drawMenuButton(#frame: CGRect, strokeWidth: CGFloat) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.25000 - 0.5) + 1, floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 0.75001 + 0.5) - floor(frame.height * 0.25000 - 0.5) - 1)


        //// Group
        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.00001 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.00001 * group.height))
        FoodClubStyleKit.white.setStroke()
        bezierPath.lineWidth = strokeWidth
        bezierPath.stroke()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.49998 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.49999 * group.height))
        FoodClubStyleKit.white.setStroke()
        bezier2Path.lineWidth = strokeWidth
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 1.00000 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 1.00000 * group.height))
        FoodClubStyleKit.white.setStroke()
        bezier3Path.lineWidth = strokeWidth
        bezier3Path.stroke()
    }

    public class func drawGradientLine(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let gradientColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.651)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor.CGColor, gradientColor.blendedColorWithFraction(0.5, ofColor: FoodClubStyleKit.lightGreen).CGColor, FoodClubStyleKit.lightGreen.CGColor], [0, 0.5, 1])

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, gradient,
            CGPointMake(rectangleRect.minX, rectangleRect.midY),
            CGPointMake(rectangleRect.maxX, rectangleRect.midY),
            0)
        CGContextRestoreGState(context)
    }

    public class func drawFilterButton(#frame: CGRect, strokeWidth: CGFloat) {

        //// Bezier 4 Drawing
        var bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.35568 * frame.width, frame.minY + 0.22750 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.25067 * frame.width, frame.minY + 0.12500 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.35568 * frame.width, frame.minY + 0.17089 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.30867 * frame.width, frame.minY + 0.12500 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.14567 * frame.width, frame.minY + 0.22750 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.19268 * frame.width, frame.minY + 0.12500 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.14567 * frame.width, frame.minY + 0.17089 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.25067 * frame.width, frame.minY + 0.33000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.14567 * frame.width, frame.minY + 0.28411 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.19268 * frame.width, frame.minY + 0.33000 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.35568 * frame.width, frame.minY + 0.22750 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30867 * frame.width, frame.minY + 0.33000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.35568 * frame.width, frame.minY + 0.28411 * frame.height))
        bezier4Path.closePath()
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.61855 * frame.width, frame.minY + 0.50250 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.71935 * frame.width, frame.minY + 0.40000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.61855 * frame.width, frame.minY + 0.44589 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.66368 * frame.width, frame.minY + 0.40000 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.82016 * frame.width, frame.minY + 0.50250 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.77503 * frame.width, frame.minY + 0.40000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.82016 * frame.width, frame.minY + 0.44589 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.71935 * frame.width, frame.minY + 0.60500 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.82016 * frame.width, frame.minY + 0.55911 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.77503 * frame.width, frame.minY + 0.60500 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.61855 * frame.width, frame.minY + 0.50250 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.66368 * frame.width, frame.minY + 0.60500 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.61855 * frame.width, frame.minY + 0.55911 * frame.height))
        bezier4Path.closePath()
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.48145 * frame.width, frame.minY + 0.77750 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.38065 * frame.width, frame.minY + 0.67500 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.48145 * frame.width, frame.minY + 0.72089 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.43632 * frame.width, frame.minY + 0.67500 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.27984 * frame.width, frame.minY + 0.77750 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.32497 * frame.width, frame.minY + 0.67500 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.27984 * frame.width, frame.minY + 0.72089 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.38065 * frame.width, frame.minY + 0.88000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.27984 * frame.width, frame.minY + 0.83411 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.32497 * frame.width, frame.minY + 0.88000 * frame.height))
        bezier4Path.addCurveToPoint(CGPointMake(frame.minX + 0.48145 * frame.width, frame.minY + 0.77750 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.43632 * frame.width, frame.minY + 0.88000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.48145 * frame.width, frame.minY + 0.83411 * frame.height))
        bezier4Path.closePath()
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.35568 * frame.width, frame.minY + 0.22750 * frame.height))
        bezier4Path.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.22500 * frame.height))
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.14567 * frame.width, frame.minY + 0.22750 * frame.height))
        bezier4Path.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.22500 * frame.height))
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.61855 * frame.width, frame.minY + 0.50250 * frame.height))
        bezier4Path.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.50000 * frame.height))
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.82016 * frame.width, frame.minY + 0.50250 * frame.height))
        bezier4Path.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.50000 * frame.height))
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.48145 * frame.width, frame.minY + 0.77750 * frame.height))
        bezier4Path.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.77500 * frame.height))
        bezier4Path.moveToPoint(CGPointMake(frame.minX + 0.27984 * frame.width, frame.minY + 0.77750 * frame.height))
        bezier4Path.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.77500 * frame.height))
        FoodClubStyleKit.white.setStroke()
        bezier4Path.lineWidth = strokeWidth
        bezier4Path.stroke()
    }

    public class func drawCancelButton(#frame: CGRect, strokeWidth: CGFloat) {

        //// Bezier 3 Drawing
        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(frame.minX + 0.15000 * frame.width, frame.minY + 0.85000 * frame.height))
        bezier3Path.addLineToPoint(CGPointMake(frame.minX + 0.85000 * frame.width, frame.minY + 0.15000 * frame.height))
        bezier3Path.moveToPoint(CGPointMake(frame.minX + 0.15000 * frame.width, frame.minY + 0.15000 * frame.height))
        bezier3Path.addLineToPoint(CGPointMake(frame.minX + 0.85000 * frame.width, frame.minY + 0.85000 * frame.height))
        FoodClubStyleKit.white.setStroke()
        bezier3Path.lineWidth = strokeWidth
        bezier3Path.stroke()
    }

    public class func drawBackButton(#frame: CGRect, strokeWidth: CGFloat) {

        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 0.67500 * frame.width, frame.minY + 0.85000 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.32500 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.64871 * frame.width, frame.minY + 0.82371 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.32500 * frame.width, frame.minY + 0.50000 * frame.height))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 0.67500 * frame.width, frame.minY + 0.15000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.32500 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.64871 * frame.width, frame.minY + 0.17629 * frame.height))
        FoodClubStyleKit.white.setStroke()
        bezierPath.lineWidth = strokeWidth
        bezierPath.stroke()
    }

    public class func drawLikeButton(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)

        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(-41.53, 79.86))
        bezierPath.addCurveToPoint(CGPointMake(-6.86, 88.15), controlPoint1: CGPointMake(-39.78, 80.54), controlPoint2: CGPointMake(-23.47, 86.74))
        bezierPath.addCurveToPoint(CGPointMake(55.76, 88.09), controlPoint1: CGPointMake(10.73, 89.65), controlPoint2: CGPointMake(52.03, 89.88))
        bezierPath.addCurveToPoint(CGPointMake(67.51, 78.73), controlPoint1: CGPointMake(59.5, 86.29), controlPoint2: CGPointMake(62.02, 85.71))
        bezierPath.addCurveToPoint(CGPointMake(69.44, 63.01), controlPoint1: CGPointMake(73.01, 71.74), controlPoint2: CGPointMake(69.44, 63.01))
        bezierPath.addCurveToPoint(CGPointMake(79.73, 47.55), controlPoint1: CGPointMake(69.44, 63.01), controlPoint2: CGPointMake(76.74, 58.32))
        bezierPath.addCurveToPoint(CGPointMake(76.91, 33.98), controlPoint1: CGPointMake(82.72, 36.77), controlPoint2: CGPointMake(76.91, 33.98))
        bezierPath.addCurveToPoint(CGPointMake(87.47, 16.02), controlPoint1: CGPointMake(76.91, 33.98), controlPoint2: CGPointMake(87.08, 26.65))
        bezierPath.addCurveToPoint(CGPointMake(81.56, 4.5), controlPoint1: CGPointMake(87.87, 5.38), controlPoint2: CGPointMake(81.56, 4.5))
        bezierPath.addCurveToPoint(CGPointMake(90, -11.33), controlPoint1: CGPointMake(81.56, 4.5), controlPoint2: CGPointMake(90, 3.87))
        bezierPath.addCurveToPoint(CGPointMake(71.37, -30.96), controlPoint1: CGPointMake(90, -26.53), controlPoint2: CGPointMake(71.37, -30.96))
        bezierPath.addLineToPoint(CGPointMake(25.95, -31.82))
        bezierPath.addCurveToPoint(CGPointMake(25.69, -63.93), controlPoint1: CGPointMake(25.95, -31.82), controlPoint2: CGPointMake(30.02, -45.1))
        bezierPath.addCurveToPoint(CGPointMake(0.14, -90), controlPoint1: CGPointMake(21.35, -82.77), controlPoint2: CGPointMake(5.77, -90))
        bezierPath.addCurveToPoint(CGPointMake(-14.33, -79.78), controlPoint1: CGPointMake(-5.49, -90), controlPoint2: CGPointMake(-10, -88.14))
        bezierPath.addCurveToPoint(CGPointMake(-21.16, -48.8), controlPoint1: CGPointMake(-18.65, -71.43), controlPoint2: CGPointMake(-14.65, -61.48))
        bezierPath.addCurveToPoint(CGPointMake(-41.69, -26.53), controlPoint1: CGPointMake(-27.67, -36.13), controlPoint2: CGPointMake(-41.69, -26.53))
        bezierPath.addLineToPoint(CGPointMake(-41.69, -26.51))
        bezierPath.addCurveToPoint(CGPointMake(-66.82, -31.87), controlPoint1: CGPointMake(-42.14, -26.74), controlPoint2: CGPointMake(-52.34, -31.87))
        bezierPath.addCurveToPoint(CGPointMake(-89.39, -19.54), controlPoint1: CGPointMake(-81.63, -31.87), controlPoint2: CGPointMake(-88.31, -22.48))
        bezierPath.addCurveToPoint(CGPointMake(-89.8, 77.26), controlPoint1: CGPointMake(-90.46, -16.61), controlPoint2: CGPointMake(-89.8, 77.26))
        bezierPath.addCurveToPoint(CGPointMake(-64.92, 89.87), controlPoint1: CGPointMake(-89.8, 77.26), controlPoint2: CGPointMake(-81.01, 91.53))
        bezierPath.addCurveToPoint(CGPointMake(-41.53, 79.86), controlPoint1: CGPointMake(-50.36, 88.36), controlPoint2: CGPointMake(-42.84, 81.21))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(83.96, 3.93))
        bezierPath.addLineToPoint(CGPointMake(61.2, 3.93))
        bezierPath.moveToPoint(CGPointMake(77.03, 34.25))
        bezierPath.addLineToPoint(CGPointMake(51.47, 34.18))
        bezierPath.moveToPoint(CGPointMake(69.63, 63.04))
        bezierPath.addLineToPoint(CGPointMake(43.95, 63.24))
        bezierPath.moveToPoint(CGPointMake(-41.11, 79.62))
        bezierPath.addLineToPoint(CGPointMake(-41.3, -26.38))
        bezierPath.lineCapStyle = kCGLineCapRound;

        bezierPath.lineJoinStyle = kCGLineJoinRound;

        FoodClubStyleKit.green.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()

        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfLogoEmpty(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            FoodClubStyleKit.drawLogoEmpty(frame: frame)

        let imageOfLogoEmpty = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLogoEmpty
    }

    public class func imageOfMenuButton(#frame: CGRect, strokeWidth: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            FoodClubStyleKit.drawMenuButton(frame: frame, strokeWidth: strokeWidth)

        let imageOfMenuButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMenuButton
    }

    public class func imageOfGradientLine(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            FoodClubStyleKit.drawGradientLine(frame: frame)

        let imageOfGradientLine = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfGradientLine
    }

    public class func imageOfFilterButton(#frame: CGRect, strokeWidth: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            FoodClubStyleKit.drawFilterButton(frame: frame, strokeWidth: strokeWidth)

        let imageOfFilterButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFilterButton
    }

    public class func imageOfCancelButton(#frame: CGRect, strokeWidth: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            FoodClubStyleKit.drawCancelButton(frame: frame, strokeWidth: strokeWidth)

        let imageOfCancelButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCancelButton
    }

    public class func imageOfBackButton(#frame: CGRect, strokeWidth: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            FoodClubStyleKit.drawBackButton(frame: frame, strokeWidth: strokeWidth)

        let imageOfBackButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBackButton
    }

    public class func imageOfLikeButton(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            FoodClubStyleKit.drawLikeButton(frame: frame)

        let imageOfLikeButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLikeButton
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
